diff --git a/ament_cmake_core/cmake/environment_hooks/ament_generate_package_environment.cmake b/ament_cmake_core/cmake/environment_hooks/ament_generate_package_environment.cmake
index cfb417f..7a8084f 100644
--- a/ament_cmake_core/cmake/environment_hooks/ament_generate_package_environment.cmake
+++ b/ament_cmake_core/cmake/environment_hooks/ament_generate_package_environment.cmake
@@ -32,6 +32,7 @@ function(ament_generate_package_environment)
 
   # configure and install setup files for the package
   foreach(file ${ament_cmake_package_templates_PACKAGE_LEVEL})
+    message("[OOO] FILE ${file}")
     # check if the file is a template
     string_ends_with("${file}" ".in" is_template)
     if(is_template)
diff --git a/ament_cmake_core/cmake/package_templates/templates_2_cmake.py b/ament_cmake_core/cmake/package_templates/templates_2_cmake.py
index fb2fb47..4a897f4 100644
--- a/ament_cmake_core/cmake/package_templates/templates_2_cmake.py
+++ b/ament_cmake_core/cmake/package_templates/templates_2_cmake.py
@@ -24,6 +24,11 @@ from ament_package.templates import get_package_level_template_path
 from ament_package.templates import get_prefix_level_template_names
 from ament_package.templates import get_prefix_level_template_path
 
+import ament_package.templates
+import importlib
+import importlib.resources
+from importlib.resources import as_file, files
+
 IS_WINDOWS = os.name == 'nt'
 
 
@@ -66,14 +71,21 @@ def generate_cmake_code():
 
     :returns: list of str
     """
+    print("\n\n[GGG]\n")
+    print("ament_package_templates.get_package_level_template_path('local_setup.bash.in')")
+    print(ament_package.templates.get_package_level_template_path('local_setup.bash.in'), "\n")
+
+    print("importlib.resources.PATH('ament_package.template.prefix_level','')")
+    with as_file(files('ament_package.template.prefix_level').joinpath('local_setup.bash')) as path:
+        print("[XXXX] ", path)
+
+    print("ament_package.template.prefix_level.__file__")
+    print(ament_package.template.prefix_level.__file__, "\n")
+
+    print("\n[GGG]\n\n")
     variables = []
 
-    if not IS_WINDOWS:
-        variables.append((
-            'ENVIRONMENT_HOOK_LIBRARY_PATH',
-            '"%s"' % get_environment_hook_template_path('library_path.sh')))
-    else:
-        variables.append(('ENVIRONMENT_HOOK_LIBRARY_PATH', ''))
+    variables.append(('ENVIRONMENT_HOOK_LIBRARY_PATH', ''))
 
     ext = '.bat.in' if IS_WINDOWS else '.sh.in'
     variables.append((
@@ -83,6 +95,7 @@ def generate_cmake_code():
     templates = []
     for name in get_package_level_template_names():
         templates.append('"%s"' % get_package_level_template_path(name))
+        print("[PPP PACKAGE] Name: ", name, "\n\t Path: ", get_package_level_template_path(name))
     variables.append((
         'PACKAGE_LEVEL',
         templates))
@@ -90,6 +103,7 @@ def generate_cmake_code():
     templates = []
     for name in get_prefix_level_template_names():
         templates.append('"%s"' % get_prefix_level_template_path(name))
+        print("[PPP PREFIX] Name: ", name, "\n\t Path: ", get_prefix_level_template_path(name))
     variables.append((
         'PREFIX_LEVEL',
         templates))
